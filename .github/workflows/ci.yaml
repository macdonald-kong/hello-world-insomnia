# Basic GitHub Actions Pipeline for Kong Konnect
#
# Author: David MacDonald
# Contact: david.macdonald@konghq.com
# Website: https://konghq.com/
#
# DISCLAIMER: DO NOT USE THIS IN PRODUCTION - FOR DEMONSTRATION PURPOSES ONLY
#

name: APIOps

on:

  push:
    branches: 
      - '**'

  workflow_dispatch:

jobs:

  deploy-api:
  
    runs-on: ubuntu-22.04
    name: Deploy API to Kong Konnect Control Plane

    steps:
    
    - name: Checkout
      uses: actions/checkout@v4

    # Install Kongs decK tool: https://docs.konghq.com/deck/latest/

    - name: Install decK tool
      run: |
        curl -sL https://github.com/kong/deck/releases/download/v1.47.1/deck_1.47.1_linux_amd64.tar.gz -o deck.tar.gz
        tar -xf deck.tar.gz -C /tmp
        sudo cp /tmp/deck /usr/local/bin/

    # Install Inso CLI: https://docs.insomnia.rest/inso-cli/install

    - name: Install inso tool
      run: |
        curl -sL https://github.com/Kong/insomnia/releases/download/core%4011.1.0/inso-linux-11.1.0.tar.xz -o inso.tar.xz
        tar -xf inso.tar.xz -C /tmp
        sudo cp /tmp/inso /usr/local/bin/

    # Use Insos Export Spec command to pull our OpenAPI Spec out of the .insomnia folder and store it as a normal OAS file

    - name: Export OpenAPI Spec
      working-directory: .
      run: |
        inso export spec $(yq '._id' $(echo -n .insomnia/ApiSpec/*)) --workingDir . --output ./api/oas.yaml

    # Read the configuration file and the OpenAPI Spec and populate the variables that we will be using

    - name: Set Variables from Config
      run: |
        echo "API_PRODUCT_NAME=$(yq .productName ./api/config/meta.yaml)" >> $GITHUB_ENV
        echo "API_PRODUCT_DESCRIPTION=$(yq .productDescription ./api/config/meta.yaml)" >> $GITHUB_ENV
        echo "API_PRODUCT_VERSION=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}" >> $GITHUB_ENV
        echo "API_PRODUCT_PUBLISH=$(yq .productPublish ./api/config/meta.yaml)" >> $GITHUB_ENV
        echo "API_PRODUCT_DEPRECATED=$(yq .productDeprecated ./api/config/meta.yaml)" >> $GITHUB_ENV
        echo "API_PRODUCT_VERSION_STATUS=$(yq .productVersionStatus ./api/config/meta.yaml)" >> $GITHUB_ENV
        echo "PORTAL_ID=$(yq .portalId ./api/config/meta.yaml)" >> $GITHUB_ENV
        echo "DELETED=$(yq .deleted ./api/config/meta.yaml)" >> $GITHUB_ENV

    # The Konnect Control Plane Name and API Product Names might include characters that need to be URL encoded.

    - name: URL Encode Variables
      run: |
        echo "API_PRODUCT_NAME_ENCODED=$(echo ${{ env.API_PRODUCT_NAME }} | sed 's/ /%20/g')"  >> $GITHUB_ENV
        echo "KONNECT_CONTROL_PLANE_NAME_ENCODED=$(echo ${{ vars.KONNECT_CONTROL_PLANE_NAME }} | sed 's/ /%20/g')"  >> $GITHUB_ENV

    # Set Variables needed for plugins and service name used by decK

    - name: Set decK Env Variables
      run: |
        echo "DECK_GATEWAY_SERVICE_NAME=$(echo $API_PRODUCT_NAME_ENCODED-$API_PRODUCT_VERSION)"  >> $GITHUB_ENV

    # Use the Konnect Control Plane Name to search for the ID using the Konnect Control Plane API

    - name: Get Konnect Control Plane ID
      run: |
        echo "KONNECT_CONTROL_PLANE_ID=$(curl \
          --url "${{ vars.KONNECT_ADDRESS }}/v2/control-planes?filter%5Bname%5D=${{ env.KONNECT_CONTROL_PLANE_NAME_ENCODED }}" \
          --header "accept: */*"  \
          --header "Authorization: Bearer ${{ secrets.KONNECT_TOKEN }}" | jq -r '.data[0].id')" >> $GITHUB_ENV

    # Check that the OpenAPI Specification file that we exported from the Insomnia Workspace is valid and well formed

    - name: Lint OpenAPI Spec
      run: |
        deck file lint -s ./api/oas.yaml .spectral.yaml

    # Use decK Ping to check that we can connect to the Kong Konnect Control Plane

    - name: Ping Kong Konnect
      run: |
        deck gateway ping \
          --konnect-addr "${{ vars.KONNECT_ADDRESS }}" \
          --konnect-token ${{ secrets.KONNECT_TOKEN }} \
          --konnect-control-plane-name "${{ vars.KONNECT_CONTROL_PLANE_NAME }}"

    #######################################
    #
    #   BUILD CONFIGURATION STAGE
    #
    #######################################

    # Use decKs openapi2kong command to generate Kong Declarative Configuration from the OpenAPI Specification exported from the Insomnia Workspace.

    - name: Generate Kong declarative configuration from Spec
      run: |
        deck file openapi2kong \
          --spec ./api/oas.yaml \
          --format yaml \
          --select-tag ${{ env.DECK_GATEWAY_SERVICE_NAME }} \
          --output-file ./kong-generated.yaml \
          --no-id

    # Use decK Merge to merge together our generated Kong Declarative Configuration File with the contents of the Plugin folder in our repository

    - name: Merge Kong Configuration with Plugins
      run: |
        deck file merge kong-generated.yaml ./api/plugins/* -o kong.yaml

    # Update Gateway Service Name so that it matches our plugins

    - name: Update Gateway Service Name
      run: |
        yq eval '.services[0].name = "${{ env.DECK_GATEWAY_SERVICE_NAME }}"' -i kong.yaml

    # Use decK Validate to check that the new generated Kong Declarative Configuration is valid

    - name: Tag Kong declarative configuration with service name
      run: |
        cat kong.yaml | deck file add-tags ${{ env.DECK_GATEWAY_SERVICE_NAME }} --output-file kong.yaml

    - name: Validate Kong declarative configuration
      run: |
        deck file validate kong.yaml 

    # Publishes Kong Declarative Configuration as an artifact

    - name: 'Upload Kong Config Artifact'
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.DECK_GATEWAY_SERVICE_NAME }}-api-kong-config
        path: kong.yaml

    #######################################
    #
    #   DEPLOY CONFIGURATION STAGE
    #
    #######################################

    # Compare the new desired state represented in the generated Kong Declarative Configuration with the current state of the platform

    - name: Diff declarative config
      run: |
        deck gateway diff kong.yaml \
          --konnect-addr ${{ vars.KONNECT_ADDRESS }} \
          --konnect-token ${{ secrets.KONNECT_TOKEN }} \
          --konnect-control-plane-name ${{ vars.KONNECT_CONTROL_PLANE_NAME }} \
          --select-tag ${{ env.DECK_GATEWAY_SERVICE_NAME }}

    # Use decK dump to take a backup of the entire Control Plane Configuration
      
    - name: Backup Existing Kong Configuration
      run: |
        deck gateway dump \
          --konnect-addr ${{ vars.KONNECT_ADDRESS }} \
          --konnect-token ${{ secrets.KONNECT_TOKEN }} \
          --konnect-control-plane-name ${{ vars.KONNECT_CONTROL_PLANE_NAME }} \
          --output-file kong-backup.yaml

    # Publishes the Backup Kong Declarative Configuration as an artifact

    - name: 'Upload Kong Config Backup Artifact'
      uses: actions/upload-artifact@v4
      with:
        name: kong-backup
        path: kong-backup.yaml

    # Uses the deck sync command to push our generated Kong Declarative Configuration to the Kong Konnect Control Plane

    - name: Deploy declarative config to development environment
      id: deploy-declarative-config
      run: |
        deck gateway sync kong.yaml \
          --konnect-addr ${{ vars.KONNECT_ADDRESS }} \
          --konnect-token ${{ secrets.KONNECT_TOKEN }} \
          --konnect-control-plane-name ${{ vars.KONNECT_CONTROL_PLANE_NAME }} \
          --select-tag ${{ env.DECK_GATEWAY_SERVICE_NAME }}

    # Set a Variable containing the Service ID of the Service that we deployed - we need this to link the API Product to a Kong Service

    - name: Get Service ID
      id: get-service-id
      run: |
        echo "SERVICE_ID=$(curl \
          --url "${{ vars.KONNECT_ADDRESS }}/v2/control-planes/${{ env.KONNECT_CONTROL_PLANE_ID}}/core-entities/services?tags=${{ env.DECK_GATEWAY_SERVICE_NAME }}" \
          --header 'accept: application/json' \
          --header "Authorization: Bearer ${{ secrets.KONNECT_TOKEN }}" | jq -r '.data[0].id')" >> "$GITHUB_ENV"

    #######################################
    #
    #   TESTING STAGE
    #
    #######################################

    # Run tests against our newly deployed API

    - name: Run Tests
      id: run-tests
      run: |
        if curl -sf -o /dev/null http://httpbin.konghq.com/headers; then
        echo "Test passed."
        else
        echo "Test failed."
        exit 1
        fi